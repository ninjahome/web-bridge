let __databaseObj;const __currentDatabaseVersion=8,__constCachedItem="__cached-items__",__databaseName="dessage-database";function initDatabase(){return new Promise(((e,r)=>{const t=indexedDB.open(__databaseName,8);t.onerror=function(e){console.error("Database open failed:",e.target.error),r(e.target.error)},t.onsuccess=function(r){__databaseObj=r.target.result,console.log("Database open success, version=",__databaseObj.version),e(__databaseObj)},t.onupgradeneeded=function(e){const r=e.target.result;if(!r.objectStoreNames.contains(__constCachedItem)){r.createObjectStore(__constCachedItem,{keyPath:"key"}).createIndex("keyIdx","key",{unique:!0}),console.log("Created cached item table successfully.")}}}))}function closeDatabase(){__databaseObj&&(__databaseObj.close(),console.log("Database connection closed."))}function databaseAddItem(e,r){return new Promise(((t,a)=>{const o=__databaseObj.transaction([e],"readwrite").objectStore(e).add(r);o.onsuccess=()=>{t(o.result)},o.onerror=r=>{a(`Error adding data to ${e}: ${r.target.error}`)}}))}function databaseGetByIndex(e,r,t){return new Promise(((a,o)=>{try{const n=__databaseObj.transaction([e],"readonly").objectStore(e),s=n.index(r).get(t);s.onsuccess=function(){s.result?a(s.result):a(null)},s.onerror=function(e){o("Error in query by key: "+e.target.error)}}catch(e){o("Transaction failed: "+e.message)}}))}function databaseGetByID(e,r){return new Promise(((t,a)=>{const o=__databaseObj.transaction([e],"readonly").objectStore(e).get(r);o.onsuccess=e=>{const r=e.target.result;t(r||null)},o.onerror=r=>{a(`Error getting data from ${e}: ${r.target.error}`)}}))}function databaseUpdate(e,r,t){return new Promise(((a,o)=>{const n=__databaseObj.transaction([e],"readwrite").objectStore(e).put({...t,id:r});n.onsuccess=()=>{a(`Data updated in ${e} successfully`)},n.onerror=r=>{o(`Error updating data in ${e}: ${r.target.error}`)}}))}function databaseAddOrUpdate(e,r){const t=__databaseObj.transaction([e],"readwrite").objectStore(e).put(r);return new Promise(((r,a)=>{t.onsuccess=()=>{const e=null===t.source;r({isNewData:e,id:t.result})},t.onerror=r=>{a(`Error adding/updating data in ${e}: ${r.target.error}`)}}))}function databaseDelete(e,r){return new Promise(((t,a)=>{const o=__databaseObj.transaction([e],"readwrite").objectStore(e).delete(r);o.onsuccess=()=>{t(`Data deleted from ${e} successfully`)},o.onerror=r=>{a(`Error deleting data from ${e}: ${r.target.error}`)}}))}function databaseDeleteByFilter(e,r){return new Promise(((t,a)=>{const o=__databaseObj.transaction([e],"readwrite").objectStore(e).openCursor();o.onsuccess=a=>{const o=a.target.result;o?(r(o.value)&&o.delete(),o.continue()):t(`Data deleted from ${e} successfully`)},o.onerror=r=>{a(`Error deleting data with condition from ${e}: ${r.target.error}`)}}))}function databaseQueryAll(e){return new Promise(((r,t)=>{const a=__databaseObj.transaction([e],"readonly").objectStore(e).getAll();a.onsuccess=e=>{const t=e.target.result;r(t)},a.onerror=r=>{t(`Error getting all data from ${e}: ${r.target.error}`)}}))}function databaseQueryByFilter(e,r){return new Promise(((t,a)=>{const o=__databaseObj.transaction([e],"readonly").objectStore(e).openCursor(),n=[];o.onsuccess=e=>{const a=e.target.result;if(a){const e=a.value;r(e)&&n.push(e),a.continue()}else t(n)},o.onerror=r=>{a(`Error querying data from ${e}: ${r.target.error}`)}}))}function databaseCleanByFilter(e,r,t){const a=__databaseObj.transaction([e],"readwrite").objectStore(e).openCursor();a.onsuccess=a=>{const o=a.target.result;if(o){const e=o.value;t(e)&&o.delete(),o.continue()}else{const t=__databaseObj.transaction([e],"readwrite"),a=t.objectStore(e);Array.isArray(r)&&r.length>0&&r.forEach((e=>{e.id?a.put(e):a.add(e)})),t.oncomplete=()=>{console.log(`Table ${e} cleared and filled with new data.`)},t.onerror=r=>{console.error(`Error filling table ${e}: ${r.target.error}`)}}},a.onerror=r=>{console.error(`Error clearing table ${e}: ${r.target.error}`)}}function databaseDeleteTable(e){const r=indexedDB.open(__databaseName);r.onsuccess=function(r){const t=r.target.result.transaction(e,"readwrite").objectStore(e).clear();t.onsuccess=function(){console.log(`${e} has been cleared`)},t.onerror=function(e){console.error("Clear object store error:",e.target.error)}},r.onerror=function(e){console.error("Database error:",e.target.error)}}