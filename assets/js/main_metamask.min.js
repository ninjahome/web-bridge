let tweetVoteContract,lotteryGameContract=null,voteContractMeta=null,gameContractMeta=null;async function initVoteContractMeta(){const[t,e,a,n,o,r,i]=await tweetVoteContract.systemSettings(),c=ethers.formatUnits(e,"ether");voteContractMeta=new TweetVoteContractSetting(Number(t),Number(e),c,Number(a),n,o,Number(r),Number(i)),TweetVoteContractSetting.sycToDb(voteContractMeta);const s=document.getElementById("tweet-post-with-eth-btn-txt-1"),m=document.getElementById("vote-price-in-modal");s&&(s.innerText=i18next.t("btn-tittle-post-tweet")+"("+voteContractMeta.votePriceInEth+" ETH)",m.innerText=voteContractMeta.votePriceInEth+" ETH")}async function initGameContractMeta(){if(!1===await checkIfMetaMaskSignOut())return;const[t,e,a,n,o]=await lotteryGameContract.systemSettings(),r=await lotteryGameContract.gameInfoRecord(t),i=ethers.formatUnits(r.bonus,"ether"),c=1e3*Number(r.discoverTime),s=ethers.formatUnits(e,"ether"),m=ethers.formatUnits(o,"ether");gameContractMeta=new GameBasicInfo(t,s,a,i,c,m)}async function initBlockChainContract(t){try{if(!t)return tweetVoteContract=null,void(lotteryGameContract=null);const e=await t.getSigner(ninjaUserObj.eth_addr),a=__globalContractConf.get(__globalTargetChainNetworkID);tweetVoteContract=new ethers.Contract(a.tweetVote,tweetVoteContractABI,e),lotteryGameContract=new ethers.Contract(a.gameLottery,gameContractABI,e),await initVoteContractMeta(),await initGameContractMeta(),setupGameInfo(),initTimerOfCounterDown()}catch(t){console.error("block chain err: ",t),checkMetamaskErr(t)}}async function procPaymentForPostedTweet(t,e){if(!tweetVoteContract)return showDialog(DLevel.Tips,"please change metamask to arbitrum network"),!1;try{showWaiting("paying for tweet");const a=await tweetVoteContract.publishTweet(t.prefixed_hash,t.signature,{value:voteContractMeta.postPrice});changeLoadingTips("packaging:"+a.hash);const n=await a.wait();return t.payment_status=n.status?TXStatus.Success:TXStatus.Failed,e&&e(t,a.hash),!0}catch(a){const n=checkMetamaskErr(a);return n&&n.includes("duplicate post")&&(t.payment_status=TXStatus.Success,e&&e(t,"-1")),!1}finally{hideLoading()}}async function procTweetVotePayment(t,e,a){if(tweetVoteContract&&voteContractMeta&&voteContractMeta.votePrice)try{showWaiting("prepare to pay");const n=BigInt(voteContractMeta.votePrice)*BigInt(t),o=await tweetVoteContract.voteToTweets(e.prefixed_hash,t,{value:n});changeLoadingTips("packaging: "+o.hash);if(!(await o.wait()).status)return void showDialog(DLevel.Error,"transaction failed");showDialog(DLevel.Success,"transaction success"),a&&a(e.create_time,t,o.hash)}catch(t){checkMetamaskErr(t)}finally{hideLoading()}else showDialog(DLevel.Tips,"please wait for metamask syncing data")}async function reloadGameBalance(){const t=await lotteryGameContract.balance(ninjaUserObj.eth_addr);document.getElementById("lottery-game-income").innerText=ethers.formatUnits(t,"ether")}async function reloadTweetBalance(){const t=await tweetVoteContract.balance(ninjaUserObj.eth_addr);document.getElementById("tweet-income-amount").innerText=ethers.formatUnits(t,"ether")}async function withdrawLotteryGameIncome(){const t=document.getElementById("lottery-game-income").innerText,e=Number(t);!e||e<=0?showDialog(DLevel.Tips,"balance invalid"):(await withdrawAction(lotteryGameContract),await reloadGameBalance())}async function withdrawFromUserTweetIncome(){const t=document.getElementById("tweet-income-amount").innerText;Number(t)<=0?showDialog(DLevel.Tips,"balance too low"):(await withdrawAction(tweetVoteContract),await reloadTweetBalance())}function incomeWithdrawHistory(){__incomeWithdrawHistory(ninjaUserObj.eth_addr)}