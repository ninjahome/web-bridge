let kolKeyContract=null;async function initBlockChainContract(o){try{if(!o)return void(kolKeyContract=null);const n=o.getSigner(ninjaUserObjWeb3ID),t=__globalContractConf.get(__globalTargetChainNetworkID);kolKeyContract=new ethers.Contract(t.kolKey,kolKeyContractABI,n),console.log("init key contract success")}catch(o){console.error("block chain err: ",o),checkMetamaskErr(o)}}async function loadUserIncomeFromKey(){showWaiting("loading from blockchain");try{const o=await kolKeyContract.AllIncomeOfAllKol(ninjaUserObjWeb3ID),n=ethers.formatUnits(o,"ether");console.log(n)}catch(o){}finally{hideLoading()}}async function loadKeyDetails(){const o=document.querySelector(".kol-list-of-investor");if("block"===o.style.display)o.style.display="none";else{o.style.display="block",showWaiting("loading from blockchain");try{const o=await kolKeyContract.AllIncomeOfAllKol(ninjaUserObjWeb3ID),n=ethers.formatUnits(o,"ether");console.log(n)}catch(o){}finally{hideLoading()}}}